Introduction to Javascript
==========================
	- What is Javascript - ES7 and where we can use it?
	---------------------------------------------------
		- Its a client side lanuguar. But is it?
		- Its lot more then what it used to be. Javascript was designed to run on browsers but its doing lot more.
		- In past to intract with server we used to write php, python where sql queries are executed and data is returned which is presented on browser.
		- We co do it now using javascript too i.e using (NodeJS). Its completly our choose wheather to show user or not.
		- NodeJS is a package which can dealy everything on the server side like writting queries, 
		- ReactJS library for building user interface, which can run on Andriod, IOS etc, 
		- Angular JS one framework for mobile and desktop 
		- Electron : build cross platform desktop apps with Javascript, HTML and CSS
		- Vue JS : Library for designing annimations for web
		- React VR :
		- TensorFlow.js : for training and deploying Machine Learning models.
		
		Java Vs Javascript
		==================
		- Probably the worst decission, ever 
		- What are the similarites between a CAR and a CARpet
		
		ES6/ ES7
		========
		- ECMAScript - European Computer Manufactures Association Script
		- 1995 - Creation - Netscape
		- 1997 - ES1
		- 2009 - 10 - ES5 --> MAP, ForEach 
		- 2015 - ES6
		- 2017 - ES7
		
		https://kangax.github.io/compat-table/es6/
		
		
	- Getting all tools for Javascript
	----------------------------------
		- NodeJS - LTS Version (Long Term Support)
		- Code Editor - Sublime, Atom, VS Code
		- Browser - Chrome
		- JSBin - Optional - https://jsbin.com/?js,console
				
		
	- Setting up VSCode and Hello world in Javascript
	-------------------------------------------------
		console.log('Hello World!');
		
		C:\VJ-Data\Learning\JavaScript\JS_ExerciseFiles\01_Basics>node HelloWorld.js
		Hello World!
	  
Basic of programming with Javascript
====================================
	- Basic of variable and constant in javascript
	----------------------------------------------
		- varailbe will change where else contant will not
		- varialbs start with 'let' , constant start with 'const'
		
		e.g let 
		
		- reserver a space in memory where I am gone put some value
		- we dont have to specifiy the type to any variable decleration javascript will know based on the value assigned
		- if we provide value in single quote or double quote its treated as string
		- to declare number dont user single or double quote
			e.g let score = 123
		- semi-clone is not mandatory in Javascript
		- dont ever redeclare same varailbe, it will throw error
	
	- Numbers in javascript
	------------------------
		- var score = 100
		  score = 130
		  const bonus = 50
		  var finalScore = (score + bonus) * 1.8
		  console.log(finalScore)
		  var complex = ((4 + 4) * 5) / 2
		  console.log(complex)
		  
		  // temprature conversion 
		  let tempInFaherhite = 33
		  let celsius  = ((tempInFaherhite - 32) * 5 / 9)
		  console.log(celsius)
		  
	- Undefined and Boolean values in Javascript
	--------------------------------------------
		- null, 0 and undefined are all different concepts
		- Boolean - true / false
		
Conditional Programming with javascript
=======================================
	- If and Else in javascript
		if(false){
			console.log('I am inside if block')
			console.log('I am still inside if block')	
		}else if(true){
			console.log('I am inside second if block')
		}
		else {
			console.log('I am inside else block')
		}
		
	- Logical operations in Javascript
	  && - AND operator
	  || - OR operator
	  ! - NOT Operator
	  
	- Var and let keyword - scope in javascript
		- var used for declaring variable 
		- difference between let and var and difference between local and global scope
		- if we declar local variable within a block using var it will be accessable outside the block too
		- dont use var in hihger version, use only if you want to declar as global
		
	- Kings territory probelm in Javascript
		- if we have not decalred a variabel in the global but assign value to variable in local
		- if we try to access the variable in local and outside block in another block we will be able to do that 
		- which is tha major issue it will consider as global, to make it local we need to declar using let inside the block
		
	- Arrays and template literals in Javascript
		- ` is used for templating
		- const superHeroes = ['Iron Man','Spiderman','Captian America','Thor']

			console.log(superHeroes)
			console.log(superHeroes[0])
			console.log(superHeroes.length)
			
			console.log(`we have ${superHeroes.length} superHeroes`)
	
	- 3 must known methods for Arrays in Javascript
		- const numbers = ['one','two','three','four','five']
		
		- numbers[1] = 'SOMETHING' --> ['one','SOMETHING','three','four','five']
	
		- number.shift() 
		  - This will return the first element of the array (one in this case). The array's first number will be deleted
		  
		- number.unshift('SOMETHING') 
		  - This will add the element to first index i.e at index 0
		  
		- numbers.pop()
			- Removes last element from the array and return it element value that is poped
		
		- numbers.push('SOMETHING')
			- This will add the element at the end of the array
			
		- numbers.splice(2, 1, 'SOMETHING')
			- Start with index 2 delete one element and add 'SOMETHING' to the array
			- (2, 2, 'SOMETHING') will delete 2 elements starting with index 2 and add only 'SOMETHING' to array
	

Loops and Function in  javascript
=================================
	- Introduction to functions in Javascript
	-----------------------------------------
		- let sayHello = function(){
				console.log('Welcome to my function')
			}

		  sayHello()
		  
		- let sayHello = function(name){
				console.log(`Welcome to my function ${name}`)
			}

		  sayHello('John') 
		  
		- let myAddress = function(num1, num2){
				let added = num1 + num2
				return added
			}

			console.log(myAddress(3,5))
			let result = myAddress(3,9)
			console.log(result)
			
	- Default parameters in Javascript
	----------------------------------
		- let guestUser = function(name ='unName', courseCount=0){
				retunr 'Hello' + name + ' and your course count is : ' + courseCount
		}
		
		console.log(guestUser())
		
	- ForEach loop in Javascript
	----------------------------
		- const days = ['Mon','Tue','Wed','Thru','Fri','Sat']

			days.forEach(function(day, index){
				console.log(`Starts with ${index+1} -- ${day}`)
			})
		- first parameter of callback function is the array element and second one is the index
		- function without any name is accepted as parmeter of the forEach
		
		
	- For Loop in Javascript
	------------------------
		- for(let i = 0; i < days.length; i++){
			const element = days[i]
			console.log(element)
		}
	
	
Objects and Arrays in Javascript
================================
	- == only check if the value is equal 
	- === identity. check the equality of object
	
	let myVar = {}
	let MyVar2 = {}
	
	console.log(myVar === myVar2) - this will return false as both are refering to different instances.
	
	Objects in Javascript
	=====================
		- Objects are THE most important
		
		let myYoutubeVideo = {
				title : 'Loops in JavaScript',
				videoLenght : 15,
				videoCreator: 'Vijay',
				videoDecription : 'This is video description and a long one'
		}

		console.log(myYoutubeVideo)

		console.log(`Hey new video on ${myYoutubeVideo.title} by ${myYoutubeVideo.videoCreator}`)	
		
	Function that takes objects and gives object
	============================================
		- Refer myObjects.js under JS_ExerciseFiles\02_Intermediate
		
	Trello V2 in JavaScript
	=======================
		- refer JS_ExerciseFiles\02_Intermediate\trelloV2.js
		
	Methods and this keyword in JavaScript
	======================================
		- Function within object is called method no more difference
			let myTodos = {
						day : 'Monday',
						mettings : 0,
						meetDone : 0,
						addMetting: function(num){
							this.mettings = this.mettings + num
						},	
						summary : function(){
							return `You have ${this.mettings} mettings today`
						}
					}

			myTodos.addMetting(4)
			console.log(myTodos.summary())
			
	Username and Password checking basic in JavaScript
	==================================================
		-   let userEmail = 'lco12'
			let userPassword = '1234'
			
			console.log(userPassword.length)
			
			let userCheck = function (myString){
				if((myString.includes(123)) && (myString.length > 6)){
					return true
				}
				return false
			}
			
			let passwordCheck = function (passwordString){
				if((passwordString.includes(1234)) && (myString.length > 8)){
					return true
				}
				return false
			}
			
			console.log(userCheck(userEmail))
			console.log(passwordCheck(userPassword))
		
	Generating a Random number in JavaScript
	========================================
		- let numOne = 22
		  let numTwo = 7
		  
		  result = 22/7
		  
		  //console.log(result)
		  //console.log(result.toFixed(2))
		  //console.log(Math.floor(result.toFixed(2)))
		  //console.log(Math.ceil(result.toFixed(2)))
		  
		  
		  //console.log(Math.random() * 5 + 1)
		  
		  let upper = 6
		  let lower = 1
		  
		  let myRandom = Math.floor((Math.random() * (upper - lower + 1))) + lower
		  
		  console.log(myRandom)
		  
	Search from Array of Objects
	============================
		- indexOf method is dont find specified element in the array it will return -1
		- Refer JS_ExerciseFiles\02_Intermediate\trelloV4.js
		
		
Modern JavaScript
=================
	- Moving forward in JS Path
	===========================
		- Web developement path
		- Advance JS useful for learning Node, React etc
	
	Arrow Function basic in JS
	==========================
		- Refer JS_ExerciseFiles\01_Advanced\arrow.js
		
		Using function
		==============
		const thingsDone = todos.filter(function(todo){
			return todo.isDone === true
		})
		
		Arrow Function 1
		================
		const thingsDone = todos.filter((todo) => {
			return todo.isDone === true
		})
		
		Arrow Function 2
		================
		const thingsDone = todos.filter((todo) => todo.isDone === true)
		
	Arrow Function basic and this keyword in JS
	===========================================
		- we can use arrow function but its not compulsory 
		- Places where its not favarourable to use arrow function.
		- Dont use arrow functions in merhod and constructors
		
	Coercion in JavaScript
	======================
		- JS will tries to predict things for you. we will see how it predict so we can use for our advantage
		
		console.log('5' - 5) // JS precditing as number - 0
		console.log('5' + 5) // JS precditing as string - 55
		
		- 3 different types of coercion with string, number and boolean
		
		- Should not allow JS to predict things for you
		- use typeOf operator to identity the type of any variable
		
		// Values that are interpreted as false
		 - false
		 - 0
		 - '' Empty string
		 - null
		 - undefined
		 
		 everything else is considered as true
		 
	Try and catch to aviod program freeze in JS
	===========================================
		- Gracefully handling errors
		- Whenever we are intacting with website and its down or not responding, we can use try and catch to handle gracefully
		- We can use promises which is a better option
		- By using try - catch program flow continues even after error
		- Previously we used try-catch for all web based, api calls but now we have better alternative called promises, chain of promises
		
	Maps and for of loop in JavaScript
	==================================
		- New datatype in JavaScript
		- Looks same as object but there are lot of difference
		- Its very usefully while working for mongoDB or firebase
		- Maps always returns an iteratable
		- we can find our number of objects or entities inside a Map but we cannot do it for Objects
		- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
		
		Refer : JS_ExerciseFiles\01_Advanced\maps_forof_loop.js
		
	
Taking Skills to WEB
====================
	Setting up web structure of JavaScript
	======================================
	- Set up basic html file and link a script.js to it and test
	
	What is DOM
	===========
		- Document : Here we refer to html document
		- Object : Anything placed within the html tag 
		- Model : Layout of all the objects
		
		https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model
		
		
	Where to keep JS files and selecting elements
	=============================================
		- It depends on the requirement. If we want to load somedata that is reterived from script then it should be plaved in head tag.
		- If the script execute some logic based on the tags present in the body it should be placed at the bottom. 
		- As JS gets executed so fast that if its using somecode that is dependednt on body and its placed in head we will get undefined response.
		
	Chaning text using javascript
	============================
		- const myPElements = document.querySelectorAll('p')
		  myPElements.forEach((p) => p.textContent = 'I am being changed by Loop in JS, Arrow Function')
		  
	Creating new element in DOM
	============================
		- const myNewElement = document.createElement('p')
		  myNewElement.textContent = 'I am added using JS create new element'
	      document.querySelector('body').appendChild(myNewElement)
	
	
	Event Listeners in JavaScript
	=============================
		document.querySelector('button').addEventListener('click',(event) => {
			event.target.textContent = 'I was Clicked'
		})
		
	Form Validation and simple application
	=======================================
		- check input of text box is a number or not also it should be between 1 and 20
		- if(isNaN(value) || value < 1 || value > 20)
			{
				console.log('Not a number')
			}
			
	Advance Form Validation
	=======================
	
TODO Application
================
	- JS_ExerciseFiles\01_Project

	While loop and create text node
	===============================
	var h = document.createElement('h1')
	var myValue = document.createTextNode('My H1 content')
	h.appendChild(myValue)
	
	document.querySelector('h1').appendChild(h)
	
	while(condition){
		
		
	}
	
Classes and Objects in JavaScript
=================================
	
	CRUD in Localstorage in JavaScript
	==================================
		- localStorage.setItem('hero','Thor')
		  localStorage.setItem('todo','Go to Gym')
		  
		  console.log(localStorage.getItem('hero'))
		  
		  console.log(localStorage.getItem('todo'))
		  
		  localStorage.setItem('todo','Buy Bread')
		  
		  console.log(localStorage.getItem('todo'))
		  
		  localStorage.removeItem('hero')
		  console.log(localStorage.getItem('hero'))
		  
		  localStorage.clear()
		  
		- we cannot store object into local storage directly we need to manipulte it to achive
		
	Parsing JSON as STRINGFY
	========================
		- https://randomuser.me/
		- https://jsoneditoronline.org/
		- JSON Generally comes as String we need to convert accordingly
		
	Classes and Objects Basics
	==========================
		- First name of class name is Caps
		- When you create a object for the first time using the class a method is called by default which is called as constructor
		- we can override it by defining in the class or it will create internally with emtpy 
		- 
		
	Inheritance and method overriding
	=================================
		- Class Teacher extends User
		- first important point is constructor
		- Refer JS_ExerciseFiles\02_Advance
	
	
	


	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
		
		
		

		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	